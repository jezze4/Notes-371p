Responsibility-Driven Design (RDD)
	developed by Rebecca Wirfs-Brock
	one of many alternative object-oriented design techniques driven by an emphasis on behavior at all levels of development

Behavior
	actions to be performed
	PROTOCOL
		complete description of all the behavior for a component
State
	all the info held within it at a given point of time

Scenarios
	acts of running the application as if it already possessed a working system

Component
	an abstract entity taht can perform tasks.. fulfill some responsibilities
	must have a small, well-defined set of responsibilities
	should interact with other components as least as possible

CRC: Component, Responsibility, Collaborator
	what/who cycle
		what must be done? who will do it?

interaction diagram
	used for describing the dynamic interactions of components during the execution of a scenario

Class
	set of objects with similar behavior
	INSTANCE
		individual respresentative of a class

Cohesion
	the degree to which the responsibilities of a single component form a meaningful unit

Coupling
	relationship between several components
	desirable to reduce this factor

Parna's Principle
-the dev of software components must provide intended user with all the info needed to make effective use of the services provided 
by the component and should provide no further information
-dev of software component must be provided with all the info necessary to carry out given responsibilities  assigned to the component and should be provided with no other info

Facilitators
	components that act "behind the scene" with little or no visibility to users of the software abstraction

Unit Testing
	Testing of an individual component

Integration Testing
	testing until it appears that the system is working as desired

Regression Testing
	Reexecuting previously developed test cases following a change to a software component
