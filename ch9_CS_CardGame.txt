					CHAPTER 9: A CASE STUDY - A CARD GAME

	- The version presented in the book is in C#. Previous versions in Java. 1st version was in C++

9.1 The Class PlayingCard
	- best to create general-purpose reusable classes that have minimal deman on enviroment
	- methods of class (written as properties, since only use -get- clause)
		- isFaceUp,  suit,  rank,  color
	- no information about the application so can be used in other apps with card abstraction
		
9.2 Data and View Classes
	- useful to separate classes that contain data values from classes that provide a graphical display of those values
	-CardView Class
		- display of card abstraction
		- actual display method is declared as -abstract- to later be subclassed/replaced
		- encapsulates card dimensions to display (which might be dependencies)
			
9.3 The Game
	- solitaire/klondike style
	- tableau = playing table	suit piles = foundations
	- from Deck (face down) -> Discard Pile (face up) -> Foundation || Tableau
	- Aces -> Kings
	
9.4 Card Piles -- Inheritance in Action
	- CardPile class
		- contains default behavior for regarding card piles
			- like: inserting, deleting, a collections of cards in the pile, etc..
			- can be overriden by subclasses
		- the -Stack- abstraction used to hold cards
		- data fields set to -Protected-
		- 5 Functions defined in CardPile
			1. includes
				default: tests topmost card
				override: in tableau piles to test all card values
			2. canTake
				default: return no
				override: in tableau and suit piles. return if pile can take in a specific card
			3. addCard
				adds card to card list
				redefine: in discard pile. switches card to face up
			4. display
				display card deck
				default: displays topmost card
				override: in tableau class. displays a column of cards. display only topmost and bottommost faceup game use
			5. select
				response to mouse click
				default: does nothing
				override: table, deck, discard. plays topmost card, if possible
	
	9.4.1 The DEFAULT card pile
		- default behaviors. methods defined in CardPile class
		
	9.4.2 The SUIT piles (Class SuitPile)
		- being built up from ace to king. located at top of playing surface

		- defines only two methods
			- constructor
				- takes in two integer arguments
				- only invokes constructor for parent class CardPile
			- canTake
				- determines whether card can be placed on pile
				- only legal if pile is empy and card is ace OR card is same suit and of next higher-rank of current card
	
	9.4.3 The DECK pile (Class DeckPile)
		- maintains deck for new cards
		- two methods
			- constructor
				- initializes itself by creating 52 cards of conventional deck into array
				- randomizes sort
			- select
				- if empty, does nothing. else, topmost card is removed and added to the discard pile
				- since it uses a specific pile, use of global variables were used before. changed to static method Game.
				
	9.4.4 The DISCARD Pile (Class DiscardPile)
		- redefines two methods
			- select
				- override/replaces default
				- checks if topmost card can be played on any suit pile or tableau pile. if not, kept in discard pile
			- addCard
				- refinement of default behavior: default is executed, along with new behavior
				- -base- used to avoid confusion with addCard being defined. similar to Java's -super-

	9.4.5 The TABLEAU piles (Class TablePile)
		- redefines nearly all virtual methods of CardPile
			- constructor
				- when initialized by constr., tableau pile removes certain number of of cards from deck, place them in its own pile
				- cards removed determined by argument
				- topmost card displayed faceup
			- canTake
				- can be added only if (pile is empty && card is king) OR (card is opposite color of topmost card && one smaller rank)
			- includes
				- tests all cards in pile
				- bottom bound not tested cuz of variable length
			- select
				- if facedown, flip face up
				- if faceup, attemp to move to suit pile, then to any availabe table pile
				- if no pile can take, leave in place
			- display
				- stack converted to array to access cards top to bottom, which is opp. of stack

9.5 Playing the Polymorphic Game
	- class Game holds actual card piles. available through methods declared as -static-. accessed only by using class name as base
	- card piles stored in array CardPile.
	- -static- constructor initializes values
	- game manager doesn't distinguish characteristics of each card pile through polymorphic array.

9.6 The Graphical User Interface
	- class WinFormsCardView subclass of CardView
	- in C#, applications created by subclassing from system-provided class name: System.WinForms.Form
	- window class resposible for mouse presses and repainting window.
		- these actions passed onto game manager
			- in Java, this done in -Main-




























